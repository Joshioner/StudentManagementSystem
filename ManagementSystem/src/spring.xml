<?xml version="1.0" encoding="UTF-8"?>
<beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:mvc="http://www.springframework.org/schema/mvc"

        xsi:schemaLocation="

	  http://www.springframework.org/schema/beans
	  http://www.springframework.org/schema/beans/spring-beans-3.0.xsd

	  http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context-3.0.xsd

	  http://www.springframework.org/schema/aop
	  http://www.springframework.org/schema/aop/spring-aop-3.0.xsd

	  http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx-3.0.xsd

      http://www.springframework.org/schema/mvc
      http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd

      ">
    <!-- 配置C3P0连接池,目的：管理数据库连接 -->
    <bean id="dataBaseSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="com.mysql.jdbc.Driver"/>
        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/day36"/>
        <property name="user" value="root"/>
        <property name="password" value="root"/>
        <!--<property name="maxPoolSize" value="5"/>-->
        <!--<property name="initialPoolSize" value="3"/>-->
        <!--<property name="minPoolSize" value="4"/>-->
        <!--<property name="acquireIncrement" value="2"/>-->
    </bean>

    <!-- 配置SqlSessionFactoryBean，目的：加载mybaits配置文件和映射文件，即替代原Mybatis工具类的作用 -->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataBaseSource"/>
        <property name="configLocation" value="classpath:MyBatis.xml"/>
    </bean>



    <!-- 配置Mybatis的事务管理器，即因为Mybatis底层用的是JDBC事务管事器，所以在这里依然配置JDBC事务管理器 -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataBaseSource"/>
    </bean>

    <!--配置事务通知，即让哪些事务方法需要事务支持-->
    <tx:advice id="tx" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <!--配置事务切面，即让哪些包下的类需要事务-->
    <aop:config>
        <aop:pointcut id="pointcut" expression="execution(* Dao.*.*(..))"/>
        <aop:advisor advice-ref="tx" pointcut-ref="pointcut"/>
    </aop:config>

    <!--注册Dao-->
    <bean id="adminDao" class="Dao.Imp.AdminDao">
        <property name="sqlSessionFactory" ref="sqlSessionFactoryBean"/>
    </bean>
    <bean id="userDao" class="Dao.Imp.UserDao">
        <property name="sqlSessionFactory" ref="sqlSessionFactoryBean"/>
    </bean>

    <!--注册Service-->
    <bean id="adminService" class="Service.AdminService">
        <property name="adminDao" ref="adminDao"/>
    </bean>
    <bean id="userService" class="Service.UserService">
        <property name="userDao" ref="userDao"/>
    </bean>

    <bean name="/test.action" class="Service.AdminService"/>
    <!-- 通知springioc容器这些注解的作用 -->
    <context:annotation-config/>

    <!--action,让springMVC IOC容器去扫描带@的注解-->
    <context:component-scan base-package="Action"/>


    <!--/register.action请求，直接转发/register.jsp-->
    <!--<bean name="/register.action" class="org.springframework.web.servlet.mvc.ParameterizableViewController">-->
        <!--<property name="viewName" value="/jsp/register.jsp"></property>-->
    <!--</bean>-->


    <!--开启注解扫描-->
    <!--<context:component-scan base-package="aop"/>-->
    <!--&lt;!&ndash;开启aop注解方式&ndash;&gt;-->
    <!--<aop:aspectj-autoproxy/>-->

    <!--&lt;!&ndash;指定切面类&ndash;&gt;-->
    <!--<bean id="aop" class="aop.Aop"/>-->

    <!--&lt;!&ndash; Aop配置 &ndash;&gt;-->
    <!--<aop:config>-->
        <!--<aop:aspect ref="aop">-->
            <!--&lt;!&ndash; 定义一个切入点表达式： 拦截哪些方法 &ndash;&gt;-->
            <!--<aop:pointcut id="point_cut" expression="execution(* aop.*.*(..))"/>-->
            <!--<aop:before method="Before" pointcut-ref="point_cut"/>-->
        <!--</aop:aspect>-->
    <!--</aop:config>-->

    <!-- 在实际开发中通常都需配置 mvc:annotation-driven标签,这个标签是开启注解 -->
    <mvc:annotation-driven></mvc:annotation-driven>
    <!-- 拦截器 -->
    <mvc:interceptors>
        <!-- 多个拦截器，顺序执行 -->
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="Interceptor.LoginInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>
</beans>